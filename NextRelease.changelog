+ Object namespace
  + Object class
  \... Base class for all engine objects
  \... Allows for parent/children relationship trees
    + Object(Object *parent = nullptr)
    \... Constructor.
    \... This sets Object._valid to true. If a derived constructor can fail, it should set _valid to false.
    + ~Object()
    \... Destructor.
    \... Ends and deletes all child objects depth-first
    + void SetParent(Object *parent)
    \... Sets this object's parent.
    \... This is mostly for internal use.
    + Object *Parent()
    \... Gets parent Object.
    + Object *Root()
    \... Gets root ancestor Object.
    + virtual void operator()();
    \... Acts as an Update() function.
    \... Redefined by base classes.
    \... Redefinitions should call Object::operator()() at some point to update children.
    + void AddChild(Object *child)
    \... Useful for creating new objects with parameters: object.AddChild(new MyObject("param0"));
    \... Also can be used for adding pre-created objects: object1.AddChild(object2);
    \... This will automatically set up parental relationships.
    \... Object will not be added to a list that already contains it.
    + T *CreateChild()
    \... templated function.
    \... Useful for creating a new child without parameters or for setting it up later: object2 = object.CreateChild<Object>();
    + void RemoveChild(Object *child)
    \... Removes the Object from list of children (if it exists).
    \... Automatically sets the former child's _parent to nullptr.
    + void RemoveChild(int index)
    \... Removes the Object at index from list of children (if list contains index).
    \... Automatically sets the former child's _parent to nullptr.
    + Object *operator[](int index)
    \... Gets the child Object at index.
    + T *FindChildOfType()
    \... templated function.
    \... Takes class that inherits from Object as template paramter.
    \... Returns first Object of a type applicable to that which was requested.
      \... If `class A : public Object` and `class B : public A`, then `FindObjectOfType<A>()` will return whichever was added earliest - `A*` or `B*` - as an `A*`.
    \... Returns nullptr if there is no child of the requested type.
    + std::vector<T*> FindChildOfType()
    \... templated function.
    \... Takes class that inherits from Object as template paramter.
    + const bool &Valid() const;
    \... Returns validity of Object.
    + operator bool() const;
    \... Returns Valid().
    + void End()
    \... Shuts down and invalidates Object and all of its children.
    \... Invalid child Objects will be deleted by their parent on next update.
+ Log namespace
  + Log class
    + Log(std::string prefix = "", std::string suffix = "", bool print = true)
    \... Constructor.
    + void operator(const std::string &format, ...)
    \... Creates a message via vsprintf.
    \... Prints `[line] + prefix + message + suffix` to the console via std::cout.
    \... `line` is shared across all Logs.
    + void operator(const std::stringstream &message)
    \... Converts message to an std::string and calls operator()(message).
    + void TogglePrint()
    \... Toggles Log's printing on and off.
    \... Useful for disabling temporary debug Logs.
  + Log Debug
  \... Uses the prefix "DBG: "
  + Log Info
  \... Uses the prefix "INF: "
  + Log Warning
  \... Uses the prefix "WAR: "
  + Log Error
  \... Uses the prefix "ERR: "
+ Input namespace
  + Key class
  \... Controlled by the EventManager and EventListeners.
    + Key()
    \... Constructor.
  + Key &GetKey(SDL_Keycode k)
  \... Gets a Key reference from a hidden map.
  \... Creates a new Key reference if one does not yet exist for the provided SDL_Keycode.
  + bool KeyHeld(SDL_Keycode k)
  \... Returns the held state of the Key held at GetKey(k).
  \... True as long as the key is held down.
  + bool KeyPressed(SDL_Keycode k)
  \... Returns the pressed state of the Key held at GetKey(k).
  \... True for one update after the key begins being held.
  + bool KeyReleased(SDL_Keycode k)
  \... Returns the released state of the Key held at GetKey(k).
  \... True for one update after the key is no longer being held.
+ Event namespace
  + EventListener class
  \... Inherits Object::Object
    + EventListener()
    \... Constructor.
    + ~EventListener()
    \... Deconstructor.
    + void operator()(SDL_Event *event = nullptr)
    \... Functions like Object::operator() if event != nullptr
    \... Calls Handle(event) if event != nullptr
    + virtual void Handle(SDL_Event *event)
    \... Handles the EventListener's event
    \... Should be replaced by all inheriting 
  + QuitEventListener class
  \... Inherits EventListener
    + QuitEventListener()
    \... Constructor.
    + ~QuitEventListener()
    \... Deconstructor.
    + void Handle(SDL_Event *event)
    \... If event->type == SDL_QUIT, this will call Root()->End() to end all Objects belonging to the same tree.
  + KeyEventListener class
  \... Inherits EventListener
    + KeyEventListener(SDL_Keycode k = SDLK_UNKNOWN)
    \... Constructor.
    + ~KeyEventListener()
    \... Deconstructor.
    + void SetKey(SDL_Keycode k)
    \... Sets the internal _key identifier of the class to k
    + void Handle(SDL_Event *event)
    \... Does nothing if _key == SDLK_UNKNOWN.
    \... Controls the state of Input::Key in the map obtained by Input::GetKey(_key).
  + EventHandler class
  \... Inherits Object::Object
    + EventHandler()
    \... Constructor.
    + ~EventHandler()
    \... Deconstructor.
    + void operator()()
    \... Polls SDL_Events and passes them to all child EventListeners
+ Graphics namespace
  + const int DEFAULT_WINDOW_WIDTH
  \... 640
  + const int DEFAULT_WINDOW_HEIGHT
  \... 480
  + Sprite class
  \... Inherits Object::Object
    + Sprite(std::string path, Object *parent = nullptr)
    \... Constructor.
    \... Creates a sprite loading an SDL_Surface from path.
    + ~Sprite()
    \... Destructor.
    \... Unloads an existing loaded SDL_Surface attached to the class.
    + void operator()()
    \... Draws the sprite to the screen at 0, 0.
    + const std::string &GetPath() const
    \... Gets the class's stored path from the constructor.
    + SDL_Surface *GetSurface()
    \... Gets the class's internal SDL_Surface.
  + Graphics class
  \... Inherits Object::Object
    + Graphics()
    \... Constructor.
    + Graphics(int w, int h)
    \... Constructor.
    \... Creates a window of size w, h
    + ~Graphics()
    \... Deconstructor.
    + void operator()()
    \... Clears the window, updates all children, then swaps the framebuffers.
    + void SetBGColor(int r, int g, int b);
    \... Sets the Window's background color
    + SDL_Surface *GetSurface()
    \... Gets the class's internal SDL_Surface.
    + SDL_Window *GetWindow()
    \... Gets the class's internal SDL_Window.
    + void DrawSprite(Sprite *sprite)
    \... Draws the given Sprite to the window at 0,0.
    + void End()
    \... Shuts down SDL.
+ Engine namespace
  + START_FLAGS namespace
  \... Contains const ints to be passed to Engine's constructor.
    + const int NONE
    + const int CREATE_GRAPHICS
    + const int CREATE_EVENTHANDLER
    + const int CREATE_EVENT_QUIT
    + const int CREATE_EVENT_KEYS_ALPHA
    + const int CREATE_EVENT_KEYS_NUM
    + const int CREATE_EVENT_KEYS_SPECIAL
    + const int CREATE_EVENT_KEYS_FUNCTION
    + const int CREATE_EVENT_KEYS_ALL
    + const int CREATE_EVENT_ALL
    + const int ALL
  + Engine class
  \... Inherits Object::Object
    + Engine(int flags = START_FLAGS::NONE)
    \... Constructor.
    + ~Engine()
    \... Deconstructor.
    + void RefreshGraphics()
    \... Sets the internal _graphics pointer to the first child of type Graphics::Graphics.
    + Graphics::Graphics *Graphics()
    \... Returns the internal _graphics pointer.
    + void RefreshEventHandler()
    \... Sets the internal _eventhandler pointer to the first child of type Event::EventHandler.
    + Event::EventHandler *EventHandler()
    \... Returns the internal _eventhandler pointer.
    + void RemoveChild(Object *child)
    \... Wrapper for Object::RemoveChild(Object *child) that clears the internal _graphics or _eventhandler pointers if they are being removed.
    + void RemoveChild(int index)
    \... Wrapper for Object::RemoveChild(int index) that clears the internal _graphics or _eventhandler pointers if they are being removed.
